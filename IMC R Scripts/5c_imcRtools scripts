---
title: "imcRtools scripts"
author: "Elizabeth Dunn"
date: "2025-06-05"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("imcRtools")
# 
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("tidySpatialExperiment")
# 
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("dittoSeq")


#BiocManager::install("lisaClust")

library(dittoSeq)
library(scater)
library(patchwork)
library(cowplot)
library(viridis)
library(SpatialExperiment)
library(tidySpatialExperiment)
library(imcRtools)
library(ggpubr)
library(dplyr)
library(multcomp)
library(rstatix)
library(dunn.test)
 library(lisaClust)
# library(spicyR)
library(multcompView)
# library(Statial)
```

```{r}

#getting to the actual spatial analysis
#load the spe and then clean up

spe<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250523_final_cluster_fixed_adipo_RO_dim.rds")

setwd("C://Users/lizwork/Documents/IMCRanalysis")

library("cytomapper")
library(ggplot2)
library(ggraph)

#get rid of the T0h, we don't care for now
spe<-spe[, colData(spe)$treatment!="T0h"]


spatialCoordsNames(spe)<-c("x" ,"y")





```


```{r}
#lets redo everything with the extra two donors added in, but remove those with mock only

#clean up the cells a little bit more, don't want cells to have NA in "total spots estimated"
spe$total_estimated_spots_fixed<- ifelse(
is.na(spe$total.estimated.spots), 
"0", spe$total.estimated.spots)

unique(spe$total_estimated_spots_fixed)

#now also need to rename "parenchyma" to "T cell zone" as this is more accurate
#also forgot to change the name of the annotations, change to reflect the class in brackets
spe <- spe |>
  mutate(Parent = case_when(
    Parent == "Annotation (B cell zone)" ~ "B cell zone",
    Parent == "Annotation (Capsule)" ~ "Capsule",
    Parent == "Annotation (Parenchyma)" ~ "T cell zone",
    Parent == "Annotation (Empty)" ~ "Empty",
    Parent == "B cell zone" ~ "B cell zone",
    Parent == "Capsule" ~ "Capsule",
    Parent == "Parenchyma" ~ "T cell zone",
    Parent == "Empty" ~ "Empty",
    Parent == "Root object (Image)" ~ "Empty", # cells on edges that are in empty areas, did not get a classification
    Parent == "NA" ~ "Empty" # cells on edges that are in empty areas, did not get a classification
  ))

# now we want to remove any cells from the "empty" area, they are not of interest/also not cells
#clean up the cells a little bit more, don't want cells that have NA in "total spots estimated", these are cells that are again out of bounds so could not calculate






spe<-spe[,spe$Parent!="Empty"]
length(spe$uID)

spe <- spe|>
  mutate(DonorID = case_when(
    DonorID == "LN179" ~ "LN179",
    DonorID == "LN163.1" ~ "LN163.1",
    DonorID == "LN162.1" ~ "LN163.1",
    DonorID == "LN158.1" ~ "LN158.1",
    DonorID == "LN146.1" ~ "LN146.1",
    DonorID == "LN70" ~ "LN70",
    DonorID == "LN212" ~ "LN212",
    DonorID == "LN217" ~ "LN217",
    DonorID == "LN223.2" ~ "LN223.2", # cells on edges that are in empty areas, did not get a classification
    DonorID == "LN154" ~ "LN154" # cells on edges that are in empty areas, did not get a classification
  ))

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

#based on the above, we want to remove LN154 and LN217 from this analysis, as they are mock only. Also remove LN212 and LN223.2, because they do not have R848. 
#Can add back #in later if we want to do things with just mock samples, like neighbourhood analysis in mock only.
#20250610 added them back in as I am using a lmer mixed effects model, can put in random intercept?
spe<-spe[, colData(spe)$DonorID!="LN154"]
spe<-spe[, colData(spe)$DonorID!="LN217"]
# spe<-spe[, colData(spe)$DonorID!="LN212"]
# spe<-spe[, colData(spe)$DonorID!="LN223.2"]

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

ggsave("20250523_percent cells by treatment.png", dpi= "print", height = 7, width = 10 )

#now clean up the channel names so I can make nicer graphs

unique(rownames(spe))

rownames(spe)<- c("Vimentin", "115In", "CD20",            
"Collagen III","143Nd", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16","149Sm", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "NaKATPase", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5", "DNA1", "DNA2")

unique(rownames(spe))

rowSubset (spe)<- c("Vimentin",  "CD20",            
"Collagen III", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5")      

```


```{r}

```


```{r}
#Ellis comments, should set k = 20-30, a larger value will give interactions over a wider area
set.seed(123)

spe_10<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 10,  coords = c("x","y"))
spe_10<-buildSpatialGraph(spe_10, img_id = "ImageID", type = "knn", name = "knn", k = 10,  coords = c("x","y"))
spe_10<-buildSpatialGraph(spe_10, img_id = "ImageID", type = "delaunay", name = "delaunay", k=10, coords = c("x","y"))





colPairNames(spe_10)

saveRDS (spe_10, "C:/Users/lizwork/Documents/IMCRanalysis/20250703_final_cluster_fixed_adipo_RO_dim_spatial_10.rds")
```


```{r}
#Ellis comments, should set k = 20-30, a larger value will give interactions over a wider area
set.seed(123)

spe_20<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 20,  coords = c("x","y"))
spe_20<-buildSpatialGraph(spe_20, img_id = "ImageID", type = "knn", name = "knn", k = 20,  coords = c("x","y"))
spe_20<-buildSpatialGraph(spe_20, img_id = "ImageID", type = "delaunay", name = "delaunay", k=20, coords = c("x","y"))





colPairNames(spe_20)

saveRDS (spe_20, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_20.rds")
```

```{r}
set.seed(123)

spe_30<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 30,  coords = c("x","y"))
spe_30<-buildSpatialGraph(spe_30, img_id = "ImageID", type = "knn", name = "knn", k = 30,  coords = c("x","y"))
spe_30<-buildSpatialGraph(spe_30, img_id = "ImageID", type = "delaunay", name = "delaunay", k=30, coords = c("x","y"))





colPairNames(spe_30)

saveRDS (spe_30, "C:/Users/lizwork/Documents/IMCRanalysis/20250703_final_cluster_fixed_adipo_RO_dim_spatial_30.rds")
```



```{r}
#Ellis comments, should set k = 20-30, a larger value will give interactions over a wider area
set.seed(123)

spe_40<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 40,  coords = c("x","y"))
spe_40<-buildSpatialGraph(spe_40, img_id = "ImageID", type = "knn", name = "knn", k = 40,  coords = c("x","y"))
#spe_40<-buildSpatialGraph(spe_40, img_id = "ImageID", type = "delaunay", name = "delaunay", k=40, coords = c("x","y"))


colPairNames(spe_40)

saveRDS (spe_40, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_40.rds")


spe_40<-readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_40.rds")





library(scales)
out_AS01 <- testInteractions(spe_40[,spe_40$treatment == "AS01"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        method= "classic",
                        iter = 500,
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))




saveRDS (out_AS01, "C:/Users/lizwork/Documents/IMCRanalysis/20250613_out_AS01_40.rds")

library(scales)

out_AS01 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1) )


ggsave("20250613_testinteractions_classic_AS01_40.png", dpi= "print", height = 6, width = 8 )
```

```{r}
set.seed(123)

spe_60<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 60,  coords = c("x","y"))
spe_60<-buildSpatialGraph(spe_60, img_id = "ImageID", type = "knn", name = "knn", k = 60,  coords = c("x","y"))
#spe_60<-buildSpatialGraph(spe_60, img_id = "ImageID", type = "delaunay", name = "delaunay", k=60, coords = c("x","y"))


colPairNames(spe_60)

saveRDS (spe_60, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_60.rds")


spe_60<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_60.rds")

out_AS01 <- testInteractions(spe_60[,spe_60$treatment == "AS01"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        method= "classic",
                        iter = 500,
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))




saveRDS (out_AS01, "C:/Users/lizwork/Documents/IMCRanalysis/20250613_out_AS01_60.rds")

library(scales)

out_AS01 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggsave("20250613_testinteractions_classic_AS01_60.png", dpi= "print", height = 6, width = 8 )
```

```{r}
set.seed(123)

spe_70<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 70,  coords = c("x","y"))
spe_70<-buildSpatialGraph(spe_70, img_id = "ImageID", type = "knn", name = "knn", k = 70,  coords = c("x","y"))
#spe_70<-buildSpatialGraph(spe_70, img_id = "ImageID", type = "delaunay", name = "delaunay", k=70, coords = c("x","y"))

?buildSpatialGraph
colPairNames(spe_70)

saveRDS (spe_70, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_70.rds")


spe_70<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_70.rds")

out_AS01_70 <- testInteractions(spe_70[,spe_70$treatment == "AS01"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        method= "classic",
                        iter = 500,
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))




saveRDS (out_AS01_70, "C:/Users/lizwork/Documents/IMCRanalysis/20250613_out_AS01_60.rds")

library(scales)

out_AS01_70 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggsave("20250613_testinteractions_classic_AS01_70.png", dpi= "print", height = 6, width = 8 )
```

```{r}

spe_100<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 100,  coords = c("x","y"))
spe_100<-buildSpatialGraph(spe_100, img_id = "ImageID", type = "knn", name = "knn", k = 100,  coords = c("x","y"))
#spe_100<-buildSpatialGraph(spe_100, img_id = "ImageID", type = "delaunay", name = "delaunay", k=100, coords = c("x","y"))

?buildSpatialGraph
colPairNames(spe_100)

saveRDS (spe_100, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_100.rds")

```






```{r}
# # knn interaction graph 
# 
# spe<- readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial.rds")
# 
# plotSpatial(spe[,spe$ImageID == "10"], 
#             node_color_by = "final_cluster",
#             coords = c("x","y"),
#             img_id = "ImageID", 
#             draw_edges = TRUE, 
#             colPairName = "knn", 
#             nodes_first = FALSE,
#             edge_color_fix = "grey") + 
#   scale_color_viridis_d()+
# 
#     ggtitle("knn interaction graph")
# 
# 
# ggsave("20250605_knn_20.png", dpi= "print", height = 12, width = 25 )
# 
# 
# 
# ```
# ```{r}
# #Spatial community analysis
# 
# set.seed(123)
# 
# community<-colPair(spe, "knn")
# 
# spe <- detectCommunity(spe, 
#                        colPairName = "knn", 
#                        size_threshold = 10,
#                        group_by = "Parent",
#                        cluster_fun = "louvain")
# 
# #plot
# 
# 
# plotSpatial(spe[,spe$ImageID == "10"], 
#             node_color_by = "spatial_community", 
#             coords = c("x","y"),
#             img_id = "ImageID", 
#             node_size_fix = 0.5,
#             ) +
#   scale_color_viridis_d()+
#     ggtitle("Spatial communities based on knn+louvain detectCommunity") 
# 
# ggsave("20250603_spatial_community.png", dpi= "print", height = 12, width = 25 )
# 
# 
# #plot by Parent
# 
# plotSpatial(spe[,spe$Parent == "Parenchyma"], 
#             node_color_by = "spatial_community", 
#             coords = c("x","y"),
#             img_id = "ImageID", 
#             node_size_fix = 0.5,
#             ) +
#     theme(legend.position = "none") +
#     ggtitle("Spatial communities based on knn+louvain detectCommunity") 
# 
# ggsave("20250603_parenchyma.png", dpi= "print", height = 12, width = 25 )
# ```
# ```{r}
# #Spatial community analysis
# 
# set.seed(123)
# 
# community<-colPair(spefix, "knn")
# 
# spefix <- detectCommunity(spefix, 
#                        colPairName = "knn", 
#                        size_threshold = 10,
#                        group_by = "Parent",
#                        cluster_fun = "louvain")
# 
# #plot
# 
# 
# plotSpatial(spefix[,spefix$ImageID == "10"], 
#             node_color_by = "spatial_community", 
#             coords = c("x","y"),
#             img_id = "ImageID", 
#             node_size_fix = 0.5,
#             ) +
#   scale_color_viridis_d()+
#     ggtitle("Spatial communities based on knn+louvain detectCommunity") 
# 
# ggsave("20250603_spatial_community.png", dpi= "print", height = 12, width = 25 )
# 
# 
# #plot by Parent
# 
# plotSpatial(spefix[,spefix$Parent == "Parenchyma"], 
#             node_color_by = "spatial_community", 
#             coords = c("x","y"),
#             img_id = "ImageID", 
#             node_size_fix = 0.5,
#             ) +
#     theme(legend.position = "none") +
#     ggtitle("Spatial communities based on knn+louvain detectCommunity") 
# 
# ggsave("20250603_parenchyma.png", dpi= "print", height = 12, width = 25 )
# 
# 
# #make a heatmap to show cell type by community
# #   library(pheatmap)
# # library(viridis)
# # 
# # cur_spe <- spe[,spe$celltype != "Tumor"]
# # 
# # for_plot <- prop.table(table(cur_spe$spatial_community, 
# #                              cur_spe$celltype), 
# #                        margin = 1)
# # 
# # pheatmap(for_plot, 
# #          color = colorRampPalette(c("dark blue", "white", "dark red"))(100), 
# #          show_rownames = FALSE, 
# #          scale = "column")
# 
# 


```

```{r}


# set.seed(123)
# 
# 
# 
# # Aggregate based on cell_type
# set.seed(123)
# spefix <- aggregateNeighbors(spefix, 
#                                   colPairName = "knn",
#                                   aggregate_by = "metadata",
#                                   count_by = "final_cluster",
#                                   name = "aggregatedNeighborhood")
# 
# 
# set.seed(123)
# 
# cn_1 <- kmeans(spefix$aggregatedNeighborhood, centers = 6)
# spefix$cn_celltypes <- as.factor(cn_1$cluster)
# 
# plotSpatial(spefix[,spefix$ImageID == "10"], 
#             node_color_by = "cn_celltypes", 
#             img_id = "ImageID", 
#             coords = c("x","y"),
#             node_size_fix = 0.5) +
#     scale_color_brewer(palette = "Set3")
# 
# ggsave("20250603_aggregateneighbour_community.png", dpi= "print", height = 12, width = 25 )
# 
# #now make a heatmap
# 
# library(pheatmap)
# 
# for_plot <- table(as.character(spefix$cn_celltypes), spefix$final_cluster)
# 
# pheatmap(for_plot, 
#          color = viridis(100), display_numbers = TRUE, 
#          number_color = "white", number_format = "%.0f")
# 
# #heatmap as fraction
# 
# for_plot <- prop.table(table(as.character(spefix$cn_celltypes), spefix$final_cluster), margin = 2)
# 
# pheatmap(for_plot, 
#          color = viridis(100), display_numbers = TRUE, 
#          number_color = "white", number_format = "%.2f")
```

```{r}
# library(lisaClust)
# regionMap(spefix, 
#           cellType = "final_cluster",
#           region = "cn_celltypes")
# 
# ggsave("20250603_lisaclust_forvis_community.png", dpi= "print", height = 10, width = 10 )
```

```{r}
#setting the names to use for interactions


```


```{r}
# #interaction analysis
# 
# library(scales)
# out <- testInteractions(spe[,spe$treatment == "AS01"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "classic",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out)
# 
# saveRDS (out, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out.rds")
# 
# library(scales)
# 
# out %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_classic_AS01.png", dpi= "print", height = 12, width = 20 )
# ```
# 
# ```{r}
# library(scales)
# out_mock <- testInteractions(spe[,spe$treatment == "mock"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "classic",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_mock)
# 
# saveRDS (out_mock, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_mock.rds")
# 
# library(scales)
# 
# out_mock %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_classic_mock.png", dpi= "print", height = 12, width = 20 )
# ```
# ```{r}
# library(scales)
# out_R848 <- testInteractions(spe[,spe$treatment == "R848"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "classic",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_R848)
# 
# saveRDS (out_R848, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_R848.rds")
# 
# library(scales)
# 
# out_R848 %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_classic_R848.png", dpi= "print", height = 12, width = 20 )
# 



```



```{r}
# library(scales)
# out <- testInteractions(spe[,spe$treatment == "AS01"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "histocat",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out)
# 
# saveRDS (out, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_histo.rds")
# 
# library(scales)
# 
# out %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_histocat_AS01.png", dpi= "print", height = 12, width = 20 )
# 
# 
# 
# library(scales)
# out_mock <- testInteractions(spe[,spe$treatment == "mock"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "histocat",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_mock)
# 
# saveRDS (out_mock, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_mock_histo.rds")
# 
# library(scales)
# 
# out_mock %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_histocat_mock.png", dpi= "print", height = 12, width = 20 )
# 
# 
# library(scales)
# out_R848 <- testInteractions(spe[,spe$treatment == "R848"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "histocat",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_R848)
# 
# saveRDS (out_R848, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_R848_histo.rds")
# 
# library(scales)
# 
# out_R848 %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_histocat_R848.png", dpi= "print", height = 12, width = 20 )
# 



```

```{r}

# 
# library(scales)
# out <- testInteractions(spe[,spe$treatment == "AS01"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "patch",
#                         patch_size = 5,
#                         
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# 
# 
# ?testInteractions
# 
# head(out)
# 
# saveRDS (out, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_patch.rds")
# 
# library(scales)
# 
# out %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_patch_AS01.png", dpi= "print", height = 12, width = 20 )
# 
# 
# 
# library(scales)
# out_mock <- testInteractions(spe[,spe$treatment == "mock"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         method= "patch",
#                         patch_size = 5,
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_mock)
# 
# saveRDS (out_mock, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_mock_patch.rds")
# 
# library(scales)
# 
# out_mock %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_patch_mock.png", dpi= "print", height = 12, width = 20 )
# 
# 
# library(scales)
# out_R848 <- testInteractions(spe[,spe$treatment == "R848"], 
#                         group_by = "ImageID",
#                         label = "final_cluster", 
#                         colPairName = "knn",
#                         patch_size = 5,
#                         method= "patch",
#                         BPPARAM = BiocParallel::SerialParam(RNGseed = 123))
# 
# 
# ?testInteractions
# 
# head(out_R848)
# 
# saveRDS (out_R848, "C:/Users/lizwork/Documents/IMCRanalysis/20250605_out_R848_patch.rds")
# 
# library(scales)
# 
# out_R848 %>% as_tibble() %>%
#     group_by(from_label, to_label) %>%
#     summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
#     ggplot() +
#         geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
#         scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
#         theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 
# 
# ggsave("20250606_testinteractions_patch_R848.png", dpi= "print", height = 12, width = 20 )

```




```{r}
#lets redo everything with the extra two donors added in

unique(spe$imageID)

spe<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250523_final_cluster_fixed_adipo_RO_dim.rds")
#clean up the cells a little bit more, don't want cells to have NA in "total spots estimated"
spe$total_estimated_spots_fixed<- ifelse(
is.na(spe$total.estimated.spots), 
"0", spe$total.estimated.spots)

unique(spe$total_estimated_spots_fixed)

#now also need to rename "parenchyma" to "T cell zone" as this is more accurate
#also forgot to change the name of the annotations, change to reflect the class in brackets
spe <- spe |>
  mutate(Parent = case_when(
    Parent == "Annotation (B cell zone)" ~ "B cell zone",
    Parent == "Annotation (Capsule)" ~ "Capsule",
    Parent == "Annotation (Parenchyma)" ~ "T cell zone",
    Parent == "Annotation (Empty)" ~ "Empty",
    Parent == "B cell zone" ~ "B cell zone",
    Parent == "Capsule" ~ "Capsule",
    Parent == "Parenchyma" ~ "T cell zone",
    Parent == "Empty" ~ "Empty",
    Parent == "Root object (Image)" ~ "Empty", # cells on edges that are in empty areas, did not get a classification
    Parent == "NA" ~ "Empty" # cells on edges that are in empty areas, did not get a classification
  ))

# now we want to remove any cells from the "empty" area, they are not of interest/also not cells
#clean up the cells a little bit more, don't want cells that have NA in "total spots estimated", these are cells that are again out of bounds so could not calculate






spe<-spe[,spe$Parent!="Empty"]
length(spe$uID)

spe <- spe|>
  mutate(DonorID = case_when(
    DonorID == "LN179" ~ "LN179",
    DonorID == "LN163.1" ~ "LN163.1",
    DonorID == "LN162.1" ~ "LN163.1",
    DonorID == "LN158.1" ~ "LN158.1",
    DonorID == "LN146.1" ~ "LN146.1",
    DonorID == "LN70" ~ "LN70",
    DonorID == "LN212" ~ "LN212",
    DonorID == "LN217" ~ "LN217",
    DonorID == "LN223.2" ~ "LN223.2", # cells on edges that are in empty areas, did not get a classification
    DonorID == "LN154" ~ "LN154" # cells on edges that are in empty areas, did not get a classification
  ))

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

#based on the above, we want to remove LN154 and LN217 from this analysis, as they are mock only. Also remove LN212 and LN223.2, because they do not have R848. 
#Can add back #in later if we want to do things with just mock samples, like neighbourhood analysis in mock only.
#20250610 added them back in as I am using a lmer mixed effects model, can put in random intercept?
spe<-spe[, colData(spe)$DonorID!="LN154"]
spe<-spe[, colData(spe)$DonorID!="LN217"]
# spe<-spe[, colData(spe)$DonorID!="LN212"]
# spe<-spe[, colData(spe)$DonorID!="LN223.2"]

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

ggsave("20250523_percent cells by treatment.png", dpi= "print", height = 7, width = 10 )

#now clean up the channel names so I can make nicer graphs

unique(rownames(spe))

rownames(spe)<- c("Vimentin", "115In", "CD20",            
"Collagen III","143Nd", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16","149Sm", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "NaKATPase", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5", "DNA1", "DNA2")

unique(rownames(spe))

rowSubset (spe)<- c("Vimentin",  "CD20",            
"Collagen III", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5")      


```

```{r}
setwd("C://Users/lizwork/Documents/IMCRanalysis")

library("cytomapper")
library(ggplot2)
library(ggraph)

#get rid of the T0h, we don't care for now
spe<-spe[, colData(spe)$treatment!="T0h"]


spatialCoordsNames(spe)<-c("x" ,"y")

#Ellis comments, should set k = 20-30, a larger value will give interactions over a wider area
set.seed(123)
spe<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 20,  coords = c("x","y"))
spe<-buildSpatialGraph(spe, img_id = "ImageID", type = "knn", name = "knn", k = 20, , coords = c("x","y"))
spe<-buildSpatialGraph(spe, img_id = "ImageID", type = "delaunay", name = "delaunay", coords = c("x","y"))

colPairNames(spe)

saveRDS (spe, "C:/Users/lizwork/Documents/IMCRanalysis/20250610_final_cluster_fixed_adipo_RO_dim_spatial_n7.rds")

unique(spe$ImageID)
```

```{r}
##Ellis advice 20250702
##for this, the knn value is 20

library(lme4)
library(dplyr)
library(emmeans)
library(ggplot2)
library(dplyr)
library(stringr)
library(tibble)
library(spicyR)

spe<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_final_cluster_fixed_adipo_RO_dim_spatial_n7.rds")

spe$imageID<-spe$ImageID
spe$cellType<-spe$final_cluster

?convPairs

pairAbundances <- convPairs(cells =  spe,
                  colPair = "knn",
                  cellType = "cellType")

head(pairAbundances)

forplot_pairs<- as.data.frame(t(pairAbundances))

cell_types <- unique(pairAbundances)
lrt_results <- data.frame()
all_contrasts<- data.frame()
data_ct_all<-data.frame()

for (ct in colnames(pairAbundances)) {
  data_ct <-data.frame(percent= pairAbundances[,ct],ImageID =as.numeric(rownames(pairAbundances), cellPair= ct))
  data_ct<-left_join(data_ct, unique(as.data.frame(colData(spe) [,c("DonorID", "treatment", "ImageID")])))
  data_ct_all<-rbind(data_ct_all, data_ct)

  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment+(1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results <- rbind(lrt_results, data.frame(label = ct, p_value = p_val))
  
    emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts <- rbind(all_contrasts, contrasts_df)
}

?emmeans

# pairAbundances_1<-pairAbundances
# 
# pairAbundances_1$ImageID<- as.numeric(rownames(pairAbundances_1))


########## boxplot ##########
m <- as.data.frame(t(pairAbundances))#transpose col to row
filt <- all_contrasts[all_contrasts$contrast == "AS01 - mock",] #only the contrast i want, have , at end because we want rows
filt <- filt$p.value<0.05 #only sig val
m <- m[filt,] # filter for the things i want to plot
m <- rownames_to_column(m, "pair")#self explanatory
m <- pivot_longer(m, cols = !pair, names_to = "ImageID", values_to = "val")#pivot to rearrange the values

m<- m |>
  mutate(treatment = case_when(
    ImageID == "1" ~ "AS01",
    ImageID == "12" ~ "AS01",
    ImageID == "13" ~ "AS01",
    ImageID == "17" ~ "AS01",
    ImageID == "18" ~ "AS01",
    ImageID == "22" ~ "AS01",
    ImageID == "25" ~ "AS01",
    ImageID == "27" ~ "AS01",
    ImageID == "28" ~ "AS01",
    ImageID == "5" ~ "AS01",
    ImageID == "6" ~ "AS01",
    ImageID == "14" ~ "mock",
    ImageID == "15" ~ "mock",
    ImageID == "19" ~ "mock",
    ImageID == "2" ~ "mock",
    ImageID == "23" ~ "mock",
    ImageID == "26" ~ "mock",
    ImageID == "29" ~ "mock",
    ImageID == "7" ~ "mock",
    ImageID == "10" ~ "R848",
    ImageID == "11" ~ "R848",
    ImageID == "20" ~ "R848",
    ImageID == "3" ~ "R848",
    ImageID == "30" ~ "R848",
    ImageID == "8" ~ "R848",
  ))


m <- m |>
  mutate(DonorID = case_when(
    ImageID == "1" ~ "LN146.1" ,
    ImageID == "12"~ "LN163.1",
    ImageID == "13" ~"LN163.1" ,
    ImageID == "17"  ~"LN179",
    ImageID == "18"  ~"LN179",
    ImageID == "22"  ~"LN212",
    ImageID == "25"  ~"LN223.2",
    ImageID == "27"  ~"LN70",
    ImageID == "28" ~"LN70" ,
    ImageID == "5"  ~"LN158.1",
    ImageID == "6"  ~"LN158.1",
    ImageID == "14"  ~"LN163.1",
    ImageID == "15"  ~"LN163.1",
    ImageID == "19"  ~"LN179",
    ImageID == "2"  ~"LN146.1",
    ImageID == "23"  ~"LN212",
    ImageID == "26" ~"LN223.2" ,
    ImageID == "29"  ~"LN70",
    ImageID == "7"  ~"LN158.1",
    ImageID == "10"  ~"LN163.1",
    ImageID == "11" ~ "LN163.1",
    ImageID == "20" ~"LN179" ,
    ImageID == "3" ~ "LN146.1" ,
    ImageID == "30" ~ "LN70",
    ImageID == "8"  ~"LN158.1",
    
    

  ))


m_forplot<-m



library(scales)
m_forplot$treatment<- factor(m$treatment, levels=c("mock", "AS01", "R848"))

ggplot(m_forplot[complete.cases(m_forplot),], aes(x=treatment, y=val, fill = "treatment")) +
  geom_boxplot(aes(fill = treatment, , scales= "free_y")) +
  facet_wrap(~pair) +
    labs(title = "KNN Spatial Graph by Treatment Group",
       x = "Treatment Group", y = "Spatial graph values (k=20)") +
  theme_classic()

ggsave("20250807_knn 20 box plot.tif", dpi= "retina", height = 7, width = 10 )


?geom_boxplot

########## /boxplot ##########

#matrix<- pivot_longer(pairAbundances_1, names_to = "CellPair", values_to = "percent", cols = -ImageID)
                      


#matrix_forplot<-left_join(matrix, data_ct_all, join_by("percent"))
                          
                     
                          
##use percent x not percent y for the graph



saveRDS (all_contrasts, "C:/Users/lizwork/Documents/IMCRanalysis/20250713_allcontrasts_knn_20.rds")
all_contrasts<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250704_allcontrasts_knn_20.rds")
saveRDS (lrt_results, "C:/Users/lizwork/Documents/IMCRanalysis/20250713_lrt_results_knn_20.rds")
saveRDS (m, "C:/Users/lizwork/Documents/IMCRanalysis/20250713_lrt_results_knn_20_forplot_2.rds")

lrt_results<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250713_lrt_results_knn_20.rds")
#double checking which pairs come up as signficant
all_contrasts %>%
filter(p.value < 0.05)

lrt_results %>%
filter(p_value < 0.05)
```

```{r}
##Eliis and GSK advice combined
##make many knn and compare
spe_10<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250703_final_cluster_fixed_adipo_RO_dim_spatial_10.rds")

spe_20<- readRDS( "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_20.rds")

spe30<-readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250703_final_cluster_fixed_adipo_RO_dim_spatial_30.rds")

spe_40<- readRDS( "C:/Users/lizwork/Documents/IMCRanalysis/20250605_final_cluster_fixed_adipo_RO_dim_spatial_40.rds")

spe_10$imageID<-spe_10$ImageID
spe_10$cellType<-spe_10$final_cluster
spe_20$imageID<-spe_20$ImageID
spe_20$cellType<-spe_20$final_cluster
spe_30$imageID<-spe_30$ImageID
spe_30$cellType<-spe_30$final_cluster
spe_40$imageID<-spe_40$ImageID
spe_40$cellType<-spe_40$final_cluster

#for testing this 

pairAbundances_10 <- convPairs(cells =  spe_10,
                  colPair = "knn",
                  cellType = "cellType")
pairAbundances_20 <- convPairs(cells =  spe_20,
                  colPair = "knn",
                  cellType = "cellType")
pairAbundances_30 <- convPairs(cells =  spe_30,
                  colPair = "knn",
                  cellType = "cellType")
pairAbundances_40 <- convPairs(cells =  spe_40,
                  colPair = "knn",
                  cellType = "cellType")

cell_types <- unique(pairAbundances_10)
lrt_results_10 <- data.frame()

for (ct in colnames(pairAbundances_10)) {
  data_ct <-data.frame(percent= pairAbundances_10[,ct],ImageID =as.numeric(rownames(pairAbundances_10)))
  data_ct<-left_join(data_ct, unique(as.data.frame(colData(spe_10) [,c("DonorID", "treatment", "ImageID")])))
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment+(1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results_10 <- rbind(lrt_results_10, data.frame(label = ct, p_value = p_val))
}

filter_10<-lrt_results_10%>%
  filter(p_value<0.05)%>%
  arrange(desc(p_value))
filter_10

cell_types <- unique(pairAbundances_20)
lrt_results_20 <- data.frame()
all_contrasts_20<- data.frame()


for (ct in colnames(pairAbundances_20)) {
  data_ct <-data.frame(percent= pairAbundances_20[,ct],ImageID =as.numeric(rownames(pairAbundances_20)))
  data_ct<-left_join(data_ct, unique(as.data.frame(colData(spe_20) [,c("DonorID", "treatment", "ImageID")])))
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment+(1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results_20 <- rbind(lrt_results_20, data.frame(label = ct, p_value = p_val))
        emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts_20 <- rbind(all_contrasts_20, contrasts_df)
}

filter_20<-lrt_results_20%>%
  filter(p_value<0.05)%>%
  arrange(desc(p_value))
filter_20

all_contrasts_20 %>%
filter(p.value < 0.05)



cell_types <- unique(pairAbundances_30)
lrt_results_30 <- data.frame()

for (ct in colnames(pairAbundances_30)) {
  data_ct <-data.frame(percent= pairAbundances_30[,ct],ImageID =as.numeric(rownames(pairAbundances_30)))
  data_ct<-left_join(data_ct, unique(as.data.frame(colData(spe_30) [,c("DonorID", "treatment", "ImageID")])))
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment+(1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results_30 <- rbind(lrt_results_30, data.frame(label = ct, p_value = p_val))
}

filter_30<-lrt_results_30%>%
  filter(p_value<0.05)%>%
  arrange(desc(p_value))
filter_30


cell_types <- unique(pairAbundances_40)
lrt_results_40 <- data.frame()
all_contrasts_40<- data.frame()



for (ct in colnames(pairAbundances_40)) {
  data_ct <-data.frame(percent= pairAbundances_40[,ct],ImageID =as.numeric(rownames(pairAbundances_40)))
  data_ct<-left_join(data_ct, unique(as.data.frame(colData(spe_40) [,c("DonorID", "treatment", "ImageID")])))
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment+(1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results_40 <- rbind(lrt_results_40, data.frame(label = ct, p_value = p_val))
      emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts_40 <- rbind(all_contrasts_40, contrasts_df)
}

filter_40<-lrt_results_40%>%
  filter(p_value<0.05)%>%
  arrange(desc(p_value))

all_contrasts_40 %>%
filter(p.value < 0.05)

as.dataframe(t(filter_40))

all_filter<-rbind(filter_10, filter_20, filter_30, filter_40)

names(which.max(table(all_filter$label)))

count(all_filter, label)%>% 
arrange(desc(n)) %>%
  head(n=30)

##now filter out those cell labels and run a follow up test on them when k =20



saveRDS (lrt_results_10, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_lrt_results_knn_10.rds")
saveRDS (lrt_results_20, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_lrt_results_knn_20_2.rds")
saveRDS (lrt_results_30, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_lrt_results_knn_20_2.rds")
saveRDS (lrt_results_40, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_lrt_results_knn_20_2.rds")
saveRDS (all_contrasts_40, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_allcontrasts_knn_40.rds")
saveRDS (all_contrasts_20, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_allcontrasts_knn_20.rds")

```

```{r}
# pairAbundances_20
```


```{r}
####begin using knn=20 spe

##FOR THESIS FIGURE
spe<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_final_cluster_fixed_adipo_RO_dim_spatial_n7.rds")

print (unique(spe$ImageID))

library(scales)
out_AS01 <- testInteractions(spe[,spe$treatment == "AS01"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        method= "classic",
                        iter = 500,
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))




saveRDS (out_AS01, "C:/Users/lizwork/Documents/IMCRanalysis/20250613_out_AS01_.rds")
out_AS01<- readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_AS01.rds")

out_AS01$from_label

library(scales)

out_AS01$from_label<-  factor(out_AS01$from_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_AS01$to_label<-  factor(out_AS01$to_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_AS01 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1),  text = element_text(size=16)) +
  labs(title = "AS01",
       x = "'From' Cell Type A", y = "'To' Cell Type B", element_text(size=24))


ggsave("20250825_testinteractions_classic_AS01_3.tif", dpi= "retina", height = 7, width = 9 )

out_AS01 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("#287D8EFF"), mid = "white", high = muted("#401554FF")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggsave("20250610_testinteractions_classic_AS01_viridis.png", dpi= "print", height = 6, width = 8 )

library(scales)
out_mock <- testInteractions(spe[,spe$treatment == "mock"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        iter=500,
                        method= "classic",
                        
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))


head(out_mock)

saveRDS (out_mock, "C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_mock.rds")
out_mock<- readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_mock.rds")

library(scales)

out_mock$from_label<-  factor(out_mock$from_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_mock$to_label<-  factor(out_mock$to_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_mock %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size=16))+
  labs(title = "Mock",
       x = "'From' Cell Type A", y = "'To' Cell Type B", element_text(size=24))


ggsave("20250825_testinteractions_classic_mock_3.tif", dpi= "retina", height = 7, width = 9 )

out_mock %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("#287D8EFF"), mid = "white", high = muted("#401554FF")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggsave("20250610_testinteractions_classic_mock_viridis.png", dpi= "print", height = 6, width = 8 )
```


```{r}

##FOR THESIS FIGURE


library(scales)
out_R848 <- testInteractions(spe[,spe$treatment == "R848"], 
                        group_by = "ImageID",
                        label = "final_cluster", 
                        colPairName = "knn",
                        method= "classic",
                        iter=500,
                        BPPARAM = BiocParallel::SerialParam(RNGseed = 123))


?testInteractions

head(out_R848)

saveRDS (out_R848, "C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_R848.rds")
out_R848<- readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_R848.rds")

library(scales)

out_R848$from_label<-  factor(out_R848$from_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_R848$to_label<-  factor(out_R848$to_label, levels=c("Adipocyte", "BEC", "FDC","Fibroblast", "FRC", "LEC", "CD169+ macs", "CD169- macs", "Mono/mac", "Extrafollicular B cell", "Follicular B cell", "Memory CD4+ T cell", "Naive CD4+ T cell", "Memory CD8+ T cell", "Naive CD8+ T cell", "NK/Innate Lymphocytes", "Langerin+ cDC2", "cDC1", "cDC2", "pDC"))

out_R848 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1), text = element_text(size=16))+
  labs(title = "R848",
       x = "'From' Cell Type A", y = "'To' Cell Type B", element_text(size=24))



ggsave("20250825_testinteractions_classic_R848_3.tif", dpi= "retina", height = 7, width = 9 )

out_R848 %>% as_tibble() %>%
    group_by(from_label, to_label) %>%
    summarize(sum_sigval = sum(sigval, na.rm = TRUE)) %>%
    ggplot() +
        geom_tile(aes(from_label, to_label, fill = sum_sigval)) +
        scale_fill_gradient2(low = muted("#287D8EFF"), mid = "white", high = muted("#401554FF")) +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))



ggsave("20250610_testinteractions_classic_R848_viridis.png", dpi= "print", height = 6, width = 8 )
```

```{r}
##testing plots

# plotInteractions(out_AS01,
#                  spe[,spe$treatment == "AS01"],
#                  group_by = "ImageID",
#                  label = "final_cluster")
# 
# 
#  BiocManager::install("imcRtools")

# remotes::install_github("BodenmillerGroup/imcRtools")

```





```{r}
#now to look at proportions

# I asked usyd copilot "Using the lme4 package in the programming language R, how to use a mixed effect model to test the difference in proportions of cell types, by four treatment groups?" and edited the output from there

#lets see if there is a difference between treatments for the output of "out"
#need to check the format of out, add a column for treatment and donor

# library(lme4)
# library(dplyr)
# library(emmeans)
# library(ggplot2)
# library(dplyr)
# library(stringr)
# 
# #use the below data frame to check the imageIDs and corresponding donors so can make them match in below code chunck
# df_check <- colData(spe) %>%
#   as.data.frame() %>%
#   group_by(DonorID, treatment, final_cluster, ImageID) %>%
#   summarise(counts = n(), .groups = "drop_last") %>%
#   mutate(total = sum(counts)) %>%
#   mutate(percent = 100 * counts / total)
# 
# out_AS01<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_AS01.rds")
# out_R848<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_R848.rds")
# out_mock<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_out_mock.rds")
# 
# df_out_AS01<- out_AS01 %>%
#   as.data.frame()
# 
# unique(df_out_AS01$group_by)
# 
# df_out_mock<- out_mock %>%
#   as.data.frame()
# 
# unique(df_out_mock$group_by)
# 
# df_out_R848<- out_R848 %>%
#   as.data.frame()
# 
# unique(df_out_R848$group_by)


# 
# unique(out_AS01$group_by)
# #group_by is the imageID
# #add in the treatment and DonorID, check in the df above to make sure everything matches
# df_out_AS01 <- df_out_AS01 |>
#   mutate(treatment = case_when(
#     group_by == "1" ~ "AS01",
#     group_by == "12" ~ "AS01",
#     group_by == "13" ~ "AS01",
#     group_by == "17" ~ "AS01",
#     group_by == "18" ~ "AS01",
#     group_by == "22" ~ "AS01",
#     group_by == "25" ~ "AS01",
#     group_by == "27" ~ "AS01",
#     group_by == "28" ~ "AS01",
#     group_by == "5" ~ "AS01",
#     group_by == "6" ~ "AS01",
# 
#   ))
# 
# df_out_AS01 <- df_out_AS01 |>
#   mutate(DonorID = case_when(
#     group_by == "1" ~ "LN146.1" ,
#     group_by == "12"~ "LN163.1",
#     group_by == "13" ~"LN163.1" ,
#     group_by == "17"  ~"LN179",
#     group_by == "18"  ~"LN179",
#     group_by == "22"  ~"LN212",
#     group_by == "25"  ~"LN223.2",
#     group_by == "27"  ~"LN70",
#     group_by == "28" ~"LN70" ,
#     group_by == "5"  ~"LN158.1",
#     group_by == "6"  ~"LN158.1",
# 
#   ))
# 
# df_out_mock<- df_out_mock|>
#   mutate(treatment = case_when(
#     group_by == "14" ~ "mock",
#     group_by == "15" ~ "mock",
#     group_by == "19" ~ "mock",
#     group_by == "2" ~ "mock",
#     group_by == "23" ~ "mock",
#     group_by == "26" ~ "mock",
#     group_by == "29" ~ "mock",
#     group_by == "7" ~ "mock",
# 
#   ))
# 
# 
# df_out_mock<- df_out_mock|>
#   mutate(DonorID = case_when(
#     group_by == "14"  ~"LN163.1",
#     group_by == "15"  ~"LN163.1",
#     group_by == "19"  ~"LN179",
#     group_by == "2"  ~"LN146.1",
#     group_by == "23"  ~"LN212",
#     group_by == "26" ~"LN223.2" ,
#     group_by == "29"  ~"LN70",
#     group_by == "7"  ~"LN158.1",
# 
#   ))
# 
# 
# 
# 
# 
# df_out_R848<- df_out_R848|>
#   mutate(treatment = case_when(
#     group_by == "10" ~ "R848",
#     group_by == "11" ~ "R848",
#     group_by == "20" ~ "R848",
#     group_by == "3" ~ "R848",
#     group_by == "30" ~ "R848",
#     group_by == "8" ~ "R848",
# 
# 
#   ))
# 
# df_out_R848<- df_out_R848|>
#   mutate(DonorID = case_when(
#     group_by == "10"  ~"LN163.1",
#     group_by == "11" ~ "LN163.1",
#     group_by == "20" ~"LN179" ,
#     group_by == "3" ~ "LN146.1" ,
#     group_by == "30" ~ "LN70",
#     group_by == "8"  ~"LN158.1",
# 
# 
#   ))
# 
# #bind it all together and then join the to and from to make a column called "pair"
#  df_out_all<- rbind(df_out_AS01, df_out_mock, df_out_R848)
#  
#  df_out_all<-unite(df_out_all, pair, from_label:to_label, sep='_')
# 
# 
# 
# df_out_all_grouped <- df_out_all %>%
#   as.data.frame() %>%
#   group_by(DonorID, treatment, pair) %>%
#   summarise(sigval_sum = sum(sigval, na.rm = T))
# 



# Assuming your data is in long format
# Columns: cell_type, treatment, subject, cell_count, total_cells

# cell_types <- unique(df_out_all_grouped$pair)
# lrt_results <- data.frame()
# all_contrasts<- data.frame()
# 
# for (ct in cell_types) {
#   data_ct <- df_out_all_grouped %>% filter(pair == ct)
#   
#   # Fit full and reduced models
#   full_model <- lmer(sigval_sum ~ treatment+(1 | DonorID),
#                       data = data_ct)
#   reduced_model <- update(full_model, . ~ . - treatment)
#   
#   # Likelihood ratio test
#   lrt <- anova(reduced_model, full_model)
#   p_val <- lrt$`Pr(>Chisq)`[2]
#   
#   lrt_results <- rbind(lrt_results, data.frame(pair = ct, p_value = p_val))
#   
#     emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
#   contrasts_df <- as.data.frame(emmeans_results$contrasts) 
#   contrasts_df$cell_type <- ct
#   all_contrasts <- rbind(all_contrasts, contrasts_df)

#   
# 
# }
# 
# qqnorm(resid(full_model))
# qqline(resid(full_model))
# 
# qqnorm(resid(reduced_model))
# qqline(resid(reduced_model))
# 
# head(all_contrasts)
#  head(lrt_results)
# 
# 
#  
# all_contrasts %>%
# filter(p.value < 0.05)
# 
# 
# 
# plot_data <- df_out_all_grouped %>%
#   group_by(DonorID, pair, treatment) %>%
#   summarise(sigval_sum = sum(sigval_sum) , .groups = "drop") %>%
#   left_join(lrt_results, by = "pair")%>%
#   filter(p_value < 0.05)
  
# plot_data <- df_out_all_grouped %>%
#   group_by(DonorID, pair, treatment) %>%
#   summarise(sigval_sum = sum(sigval_sum) , .groups = "drop") %>%
#   left_join(lrt_results, by = "pair")%>%
#   filter(p_value < 0.05)%>%
#   left_join(all_contrasts, by = "pair")%>%
#   filter(p_value < 0.05)





# Create p-value labels
# pval_labels <- lrt_results %>%
#   mutate(label = paste0("p = ", signif(p_value, 3)))
# 
# pval_to_stars <- function(p) {
#   if (p < 0.001) return("***")
#   else if (p < 0.01) return("**")
#   else if (p < 0.05) return("*")
#   else return("ns")
# }
# 
# pval_labels <- lrt_results %>%
#   mutate(label = sapply(p_value, pval_to_stars))


# Plot
# ggplot(plot_data, aes(x = treatment, y = percent, fill = treatment)) +
#   geom_boxplot() +
#   facet_wrap(~ final_cluster, scales = "free_y") +
#   geom_text(data = pval_labels, aes(x = 2.5, y = max(plot_data$percent+0.5), label = label),
#             inherit.aes = FALSE, vjust = 1.5) +
#   labs(title = "Percent Cell Types by Treatment Group",
#        x = "Treatment Group", y = "Proportion") +
#   theme_classic()

# max_percent <- plot_data %>%
#   group_by(pair) %>%
#   summarise(max = max(sigval_sum))
# 
# ggplot(plot_data, aes(x = treatment, y = sigval_sum, colour = DonorID)) +
#   geom_jitter() +
#   facet_wrap(~ pair, scales = "free_y") +
#   geom_text(data = pval_labels, aes(x = 2.5, y = Inf, label = label),
#             inherit.aes = FALSE, vjust = 1.5) +
#   labs(title = "Percent Cell Types by Treatment Group",
#        x = "Treatment Group", y = "Proportion") +
#   theme_classic()
# 
# ggsave("20250506_pair mixed effect model_jitter_test.png", dpi= "print", height = 25, width = 40 )



```


```{r}
# cell_types <- unique(df_out_all_grouped$pair)
# lrt_results <- data.frame()
# 
# for (ct in cell_types) {
#   data_ct <- df_out_all_grouped %>% filter(pair == ct)
#   
#   # Fit full and reduced models
#   full_model <- lmer(sigval_sum ~ treatment+(1 | DonorID),
#                       data = data_ct)
#   reduced_model <- update(full_model, . ~ . - treatment)
#   
# 
# 
#  # Estimated marginal means
#  emm <- emmeans(full_model, ~ treatment)
# 
# # Tukey post hoc test
# tukey <- contrast(emm, method = "tukey")
#  
# # Store results
# results_list[[ct]] <- list(
#   model = full_model,
#  emmeans = emm,
#  tukey = summary(tukey)
# )
# }

# results_list
# 
# plot_data <- df_out_all_grouped %>%
#   group_by(DonorID, pair, treatment) %>%
#   summarise(sigval_sum = sum(sigval_sum) , .groups = "drop") %>%
#   left_join(lrt_results, by = "pair")
# 
# # Create p-value labels
# pval_labels <- lrt_results %>%
#   mutate(label = paste0("p = ", signif(p_value, 3)))
# 
# pval_to_stars <- function(p) {
#   if (p < 0.001) return("***")
#   else if (p < 0.01) return("**")
#   else if (p < 0.05) return("*")
#   else return("ns")
# }
# 
# pval_labels <- lrt_results %>%
#   mutate(label = sapply(p_value, pval_to_stars))
# 
# 
# 
# library(scales)
# 
# q_colors =  20


# Plot
# ggplot(plot_data, aes(x = treatment, y = percent, fill = treatment)) +
#   geom_boxplot() +
#   facet_wrap(~ final_cluster, scales = "free_y") +
#   geom_text(data = pval_labels, aes(x = 2.5, y = max(plot_data$percent+0.5), label = label),
#             inherit.aes = FALSE, vjust = 1.5) +
#   labs(title = "Percent Cell Types by Treatment Group",
#        x = "Treatment Group", y = "Proportion") +
#   theme_classic()

# max_percent <- plot_data %>%
#   group_by(pair) %>%
#   summarise(max = max(sigval_sum))
# 
# ggplot(plot_data, aes(x = treatment, y = sigval_sum, colour = DonorID)) +
#   geom_jitter() +
#   facet_wrap(~ pair, scales = "free_y") +
#   geom_text(data = pval_labels, aes(x = 2.5, y = Inf, label = label),
#             inherit.aes = FALSE, vjust = 1.5) +
#   labs(title = "Percent Cell Types by Treatment Group",
#        x = "Treatment Group", y = "Proportion") +
#   theme_classic()
# 
# ggsave("20250506_pair mixed effect model_jitter_tukey.png", dpi= "print", height = 25, width = 40 )
```




```{r}

library(Statial)

?Kontextual

?calcStateChanges

?plotStateChanges

?prepMatrix

```


```{r}

###calculate distances
# 
# spe$Signed.distance.to.annotation.with.Capsule.µm
# 
# library(lme4)
# library(dplyr)
# library(emmeans)
# library(ggplot2)
# library(dplyr)
# library(stringr)
# 
# # colData(spe) %>%
# #   as.data.frame() %>%
# #   group_by(DonorID, treatment, final_cluster, Signed.distance.to.annotation.with.Capsule.µm) %>%
# #   summarise(counts = n(), .groups = "drop_last") %>%
# #   ggplot(aes(final_cluster, Signed.distance.to.annotation.with.Capsule.µm, fill = treatment)) +
# #   geom_boxplot() +
# #   facet_wrap(~final_cluster, scales = "free") +
# #   scale_colour_viridis_d()+
# #   theme_classic() + 
# # stat_compare_means(
# #                      method= "anova", label= "p.format",
# #                      symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, Inf), symbols = c("****", "***", "**", "*", "ns"))  )
# #   
# 
# df <- colData(spe) %>%
#   as.data.frame() %>%
#   group_by(DonorID, treatment, final_cluster,Signed.distance.to.annotation.with.Capsule.µm ) %>%
#   summarise(counts = n(), .groups = "drop_last") %>%
#   mutate(total = sum(counts)) %>%
#   mutate(percent = 100 * counts / total)%>%
#   filter(treatment!= "T0h")%>%
#   filter(final_cluster!= "Adipocyte")%>%
#     filter(final_cluster!= "LEC")%>%
#     filter(final_cluster!= "BEC")%>%
#     filter(final_cluster!= "FRC")%>%
#     filter(final_cluster!= "Fibroblast")%>%
#     filter(final_cluster!= "FDC")
# 
# 
# 
# 
# df$treatment_factor<- factor(df$treatment, levels=c("mock", "AS01", "R848"))
# 
# 
# 
# 
# # Assuming your data is in long format
# # Columns: cell_type, treatment, subject, cell_count, total_cells
# 
# df$percent<-df$Signed.distance.to.annotation.with.Capsule.µm
# cell_types <- unique(df$final_cluster)
# lrt_results <- data.frame()
# all_contrasts<- data.frame()
# 
# for (ct in cell_types) {
#   data_ct <- df %>% filter(final_cluster == ct)
#   
#   # Fit full and reduced models
#   full_model <- lmer(percent ~ treatment + (1 | DonorID),
#                       data = data_ct)
#   reduced_model <- update(full_model, . ~ . - treatment)
#   
#   # Likelihood ratio test
#   lrt <- anova(reduced_model, full_model)
#   p_val <- lrt$`Pr(>Chisq)`[2]
#   
#   lrt_results <- rbind(lrt_results, data.frame(final_cluster = ct, p_value = p_val))
#   
#   emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
#   contrasts_df <- as.data.frame(emmeans_results$contrasts) 
#   contrasts_df$cell_type <- ct
#   all_contrasts <- rbind(all_contrasts, contrasts_df)
# 
# }
# 
# 
# 
# plot_data <- df %>%
#   group_by(final_cluster, treatment_factor, DonorID) %>%
#   summarise(percent = (sum(counts) / sum(total)*100), .groups = "drop") %>%
#   left_join(lrt_results, by = "final_cluster")
# 
# # Create p-value labels
# pval_labels <- lrt_results %>%
#   mutate(label = paste0("p = ", signif(p_value, 3)))
# 
# pval_labels_posthoc <- all_contrasts %>%
#   mutate(label = signif(p.value, digits=3))
# 
# 
# 
# pval_to_stars <- function(p) {
#   if (p < 0.001) return("***")
#   else if (p < 0.01) return("**")
#   else if (p < 0.05) return("*")
#   else return("ns")
# }
# 
# pval_labels <- lrt_results %>%
#   mutate(label = sapply(p_value, pval_to_stars))
# 
# pval_labels_posthoc <- all_contrasts %>%
#   mutate(label = sapply(p.value, pval_to_stars))
# head(spe$Signed.distance.to.annotation.with.Capsule.µm)
# 
# 


```


```{r}
###try plotting the average per donor?

spe$Signed.distance.to.annotation.with.Capsule.µm<- as.numeric(spe$Signed.distance.to.annotation.with.Capsule.µm)

df <- colData(spe) %>%
  as.data.frame() %>%
    filter(treatment!= "T0h")%>%
  filter(final_cluster!= "Adipocyte")%>%
    filter(final_cluster!= "LEC")%>%
    filter(final_cluster!= "BEC")%>%
    filter(final_cluster!= "FRC")%>%
    filter(final_cluster!= "Fibroblast")%>%
    filter(final_cluster!= "FDC")%>%
  group_by(DonorID, final_cluster, treatment) %>%
  summarise(Mean = mean (Signed.distance.to.annotation.with.Capsule.µm, na.rm= TRUE))

df$treatment_factor<- factor(df$treatment, levels=c("mock", "AS01", "R848"))




# Assuming your data is in long format
# Columns: cell_type, treatment, subject, cell_count, total_cells

df$percent<-df$Mean
cell_types <- unique(df$final_cluster)
lrt_results <- data.frame()
all_contrasts<- data.frame()

for (ct in cell_types) {
  data_ct <- df %>% filter(final_cluster == ct)
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment + (1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results <- rbind(lrt_results, data.frame(final_cluster = ct, p_value = p_val))
  
  emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts <- rbind(all_contrasts, contrasts_df)

}


lrt_results %>%
filter(p_value < 0.05)

#nothing statistically significant

df$treatment<- factor(df$treatment, levels=c("mock", "AS01", "R848"))


ggplot(df, aes(x = treatment, y = percent, fill = treatment_factor)) +
  geom_boxplot() +
  facet_wrap(~ final_cluster, scales = "free_y") +
  labs(title = "Mean signed distance to capsule",
       x = "Treatment Group", y = expression(paste("Signed distance (", mu, "m)"))) +
  theme_classic(base_size = 14)

ggsave("20250807_boxplot_distances.tif", dpi= "retina", height = 11, width = 12 )


```
```{r}
#lets try not averaging first?
spe$Signed.distance.to.annotation.with.Capsule.µm<- as.numeric(spe$Signed.distance.to.annotation.with.Capsule.µm)

df <- colData(spe) %>%
  as.data.frame() %>%
    filter(treatment!= "T0h")%>%
  filter(final_cluster!= "Adipocyte")%>%
    filter(final_cluster!= "LEC")%>%
    filter(final_cluster!= "BEC")%>%
    filter(final_cluster!= "FRC")%>%
    filter(final_cluster!= "Fibroblast")%>%
    filter(final_cluster!= "FDC")%>%
  group_by(DonorID, final_cluster, treatment)


df$treatment_factor<- factor(df$treatment, levels=c("mock", "AS01", "R848"))





ggplot(df, aes(x = treatment, y = Signed.distance.to.annotation.with.Capsule.µm, fill = treatment_factor)) +
  geom_jitter(width = 0.2, alpha = 0.3)+
  facet_wrap(~ final_cluster, scales = "free_y") +
  labs(title = "Mean signed distance to capsule",
       x = "Treatment Group", y = expression(paste("Signed distance (", mu, "m)"))) +
  theme_classic(base_size = 14)

ggsave("20250811_boxplot_distances.tif", dpi= "retina", height = 11, width = 12 )


df$percent<-df$Signed.distance.to.annotation.with.Capsule.µm
cell_types <- unique(df$final_cluster)
lrt_results <- data.frame()
all_contrasts<- data.frame()

for (ct in cell_types) {
  data_ct <- df %>% filter(final_cluster == ct)
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment + (1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results <- rbind(lrt_results, data.frame(final_cluster = ct, p_value = p_val))
  
  emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts <- rbind(all_contrasts, contrasts_df)

}


lrt_results %>%
filter(p_value < 0.05)

all_contrasts %>%
filter(p.value < 0.05)



```

```{r}
#make a ridge plot
spe$treatment_factor<- factor(spe$treatment, levels=c("mock", "AS01", "R848"))
spe$final_cluster_factor<- factor(spe$final_cluster, levels= c( "NK/Innate Lymphocytes",
"Follicular B cell",  "Extrafollicular B cell",
"pDC",
"Langerin+ cDC2",
"cDC2",
"CD169- macs",
"cDC1",
"CD169+ macs", 
"Mono/mac",
"Memory CD8+ T cell",
"Naive CD8+ T cell",
"Memory CD4+ T cell",
"Naive CD4+ T cell",
"Fibroblast", 
"FRC",
"Adipocyte",
"LEC", 
"BEC",
"FDC" 

  ))

spe$final_cluster_factor_2<- factor(spe$final_cluster, levels= c( "NK/Innate Lymphocytes",
"Extrafollicular B cell",
"pDC",
"Langerin+ cDC2",
"cDC2",
"CD169+ macs",
"CD169- macs",
"cDC1",
"Mono/mac",
"Memory CD8+ T cell",
"Naive CD8+ T cell",
"Memory CD4+ T cell",
"Naive CD4+ T cell"
  ))

library(ggridges)

ggplot(as.data.frame(colData(spe))) + 
    geom_density_ridges(aes(Signed.distance.to.annotation.with.Capsule.µm, final_cluster_factor_2, fill = treatment_factor, alpha = 0.3)) +    geom_vline(xintercept = 0, color = "dark red", linewidth = 2)+ theme_ridges(grid = F, center_axis_labels = T)+
  labs(, x = expression("Signed Distance to Capsule "~mu), y = "Cell Type", element_text(size=24))

?theme_ridges

?geom_density_ridges

ggsave("20250825_distances_ridgeplot.tif", dpi= "retina", height = 6, width = 8 )
```


```{r}
#lets do a test for statistical significance

spe$capsule_near_far <- ifelse(spe$Signed.distance.to.annotation.with.Capsule.µm >0 & spe$Signed.distance.to.annotation.with.Capsule.µm <=150,
  "near", "far"
)
spe$capsule_near_far<- as.character(spe$capsule_near_far)

df <- colData(spe) %>%
  as.data.frame() %>%
  group_by(DonorID, treatment, treatment_factor, final_cluster, capsule_near_far) %>%
  summarise(counts = n(), .groups = "drop_last") %>%
  mutate(total = sum(counts)) %>%
  mutate(percent = 100 * counts / total)%>%
  filter(treatment!= "T0h")




 df_c<- df[complete.cases(df),]
 
# df_c <- df_c%>%
#   mutate(percent_near = case_when(
#     capsule_near_far == "near" ~ percent,
#     capsule_near_far == "far" ~ NA
#   ))%>%
#       mutate(percent_far = case_when(
#     capsule_near_far == "near" ~ NA,
#     capsule_near_far == "far" ~ percent))


df_c_2<- df_c%>%
  filter(capsule_near_far!= "far")




cell_types <- unique(df_c_2$final_cluster)
lrt_results <- data.frame()
all_contrasts<- data.frame()

for (ct in cell_types) {
  data_ct <- df_c_2 %>% filter(final_cluster == ct)
  
  # Fit full and reduced models
  full_model <- lmer(percent ~ treatment + (1 | DonorID),
                      data = data_ct)
  reduced_model <- update(full_model, . ~ . - treatment)
  
  # Likelihood ratio test
  lrt <- anova(reduced_model, full_model)
  p_val <- lrt$`Pr(>Chisq)`[2]
  
  lrt_results <- rbind(lrt_results, data.frame(final_cluster = ct, p_value = p_val))
  
  emmeans_results <- emmeans(full_model, pairwise ~ treatment, adjust = "tukey")
  contrasts_df <- as.data.frame(emmeans_results$contrasts) 
  contrasts_df$cell_type <- ct
  all_contrasts <- rbind(all_contrasts, contrasts_df)

}


lrt_results %>%
filter(p_value < 0.05)

##nothing statistically significant here





 
#  table1<-df_c%>%
#    as_tibble%>%
#    filter(final_cluster=="cDC2")%>%
#    group_by(percent)
#    
#  
#  
#  
#    table(df_c$treatment_factor, df_c$percent)
# 
# ?chisq.test()
# 
# table(spe$final_cluster, spe$capsule_near_far)
# 
# library(ggplot2)
# 
# ggplot(as.data.frame(colData(spe))) + 
#     aes(x = final_cluster, fill = capsule_near_far) +
#   geom_bar(position = "fill")
# 
# table<-as.data.frame(colData(spe))%>%
#   table(spe$final_cluster, spe$capsule_near_far)
# 
# test <- chisq.test(table(df$final_cluster, spe$))
# test

```


```{r}
##lets do patch for distance to capsule cells
# set.seed(123)
# 
# spe<-readRDS ("C:/Users/lizwork/Documents/IMCRanalysis/20250610_final_cluster_fixed_adipo_RO_dim_spatial_n7.rds")
# 
# spe <- patchDetection(spe, 
#                       patch_cells = spe$Parent == "Capsule",
#                       img_id = "ImageID",
#                       expand_by = 1,
#                       min_patch_size = 10,
#                       colPairName = "knn",
#                       coords = c("x","y")
#                       )

```

```{r}
spe <- spe |>
  mutate(final_cluster_2= case_when(
    
    
    final_cluster == "NK/Innate Lymphocytes" & treatment == "AS01" ~ "NK/Innate Lymphocytes_AS01",
    final_cluster == "NK/Innate Lymphocytes" & treatment == "mock" ~ "NK/Innate Lymphocytes_Mock",
    final_cluster == "NK/Innate Lymphocytes" & treatment == "R848" ~ "NK/Innate Lymphocytes_R848",
    final_cluster == "NK/Innate Lymphocytes" & treatment == "T0h" ~ "NK/Innate Lymphocytes_T0h",
    final_cluster == "Follicular B cell" & treatment == "AS01" ~ "Follicular B cell_AS01",
    final_cluster == "Follicular B cell" & treatment == "mock" ~ "Follicular B cell_Mock",
    final_cluster == "Follicular B cell" & treatment == "R848" ~ "Follicular B cell_R848",
    final_cluster == "Follicular B cell" & treatment == "T0h" ~ "Follicular B cell_T0h",
    final_cluster == "Extrafollicular B cell" & treatment == "AS01" ~ "Extrafollicular B cell_AS01",
    final_cluster == "Extrafollicular B cell" & treatment == "mock" ~ "Extrafollicular B cell_Mock",
    final_cluster == "Extrafollicular B cell" & treatment == "R848" ~ "Extrafollicular B cell_R848",
    final_cluster == "Extrafollicular B cell" & treatment == "T0h" ~ "Extrafollicular B cell_T0h",
    final_cluster == "pDC" & treatment == "AS01" ~ "pDC_AS01",
    final_cluster == "pDC" & treatment == "mock" ~ "pDC_Mock",
    final_cluster == "pDC" & treatment == "R848" ~ "pDC_R848",
    final_cluster == "pDC" & treatment == "T0h" ~ "pDC_T0h",
    final_cluster == "Langerin+ cDC2" & treatment == "AS01" ~ "Langerin+ cDC2_AS01",
    final_cluster == "Langerin+ cDC2" & treatment == "mock" ~ "Langerin+ cDC2_Mock",
    final_cluster == "Langerin+ cDC2" & treatment == "R848" ~ "Langerin+ cDC2_R848",
    final_cluster == "Langerin+ cDC2" & treatment == "T0h" ~ "Langerin+ cDC2_T0h",
    final_cluster == "cDC2" & treatment == "AS01" ~ "cDC2_AS01",
    final_cluster == "cDC2" & treatment == "mock" ~ "cDC2_Mock",
    final_cluster == "cDC2" & treatment == "R848" ~ "cDC2_R848",
    final_cluster == "cDC2" & treatment == "T0h" ~ "cDC2_T0h",
    final_cluster == "CD169- macs" & treatment == "AS01" ~ "CD169- macs_AS01",
    final_cluster == "CD169- macs" & treatment == "mock" ~ "CD169- macs_Mock",
    final_cluster == "CD169- macs" & treatment == "R848" ~ "CD169- macs_R848",
    final_cluster == "CD169- macs" & treatment == "T0h" ~ "CD169- macs_T0h",
    final_cluster == "cDC1" & treatment == "AS01" ~ "cDC1_AS01",
    final_cluster == "cDC1" & treatment == "mock" ~ "cDC1_Mock",
    final_cluster == "cDC1" & treatment == "R848" ~ "cDC1_R848",
    final_cluster == "cDC1" & treatment == "T0h" ~ "cDC1_T0h",
    final_cluster == "CD169+ macs" & treatment == "AS01" ~ "CD169+ macs_AS01",
    final_cluster == "CD169+ macs" & treatment == "mock" ~ "CD169+ macs_Mock",
    final_cluster == "CD169+ macs" & treatment == "R848" ~ "CD169+ macs_R848",
    final_cluster == "CD169+ macs" & treatment == "T0h" ~ "CD169+ macs_T0h",
    final_cluster == "Mono/mac" & treatment == "AS01" ~ "Mono/mac_AS01",
    final_cluster == "Mono/mac" & treatment == "mock" ~ "Mono/mac_Mock",
    final_cluster == "Mono/mac" & treatment == "R848" ~ "Mono/mac_R848",
    final_cluster == "Mono/mac" & treatment == "T0h" ~ "Mono/mac_T0h",
    final_cluster == "Memory CD8+ T cell" & treatment == "AS01" ~ "Memory CD8+ T cell_AS01",
    final_cluster == "Memory CD8+ T cell" & treatment == "mock" ~ "Memory CD8+ T cell_Mock",
    final_cluster == "Memory CD8+ T cell" & treatment == "R848" ~ "Memory CD8+ T cell_R848",
    final_cluster == "Memory CD8+ T cell" & treatment == "T0h" ~ "Memory CD8+ T cell_T0h",
    final_cluster == "Naive CD8+ T cell" & treatment == "AS01" ~ "Naive CD8+ T cell_AS01",
    final_cluster == "Naive CD8+ T cell" & treatment == "mock" ~ "Naive CD8+ T cell_Mock",
    final_cluster == "Naive CD8+ T cell" & treatment == "R848" ~ "Naive CD8+ T cell_R848",
    final_cluster == "Naive CD8+ T cell" & treatment == "T0h" ~ "Naive CD8+ T cell_T0h",
    final_cluster == "Memory CD4+ T cell" & treatment == "AS01" ~ "Memory CD4+ T cell_AS01",
    final_cluster == "Memory CD4+ T cell" & treatment == "mock" ~ "Memory CD4+ T cell_Mock",
    final_cluster == "Memory CD4+ T cell" & treatment == "R848" ~ "Memory CD4+ T cell_R848",
    final_cluster == "Memory CD4+ T cell" & treatment == "T0h" ~ "Memory CD4+ T cell_T0h",
    final_cluster == "Naive CD4+ T cell" & treatment == "AS01" ~ "Naive CD4+ T cell_AS01",
    final_cluster == "Naive CD4+ T cell" & treatment == "mock" ~ "Naive CD4+ T cell_Mock",
    final_cluster == "Naive CD4+ T cell" & treatment == "R848" ~ "Naive CD4+ T cell_R848",
    final_cluster == "Naive CD4+ T cell" & treatment == "T0h" ~ "Naive CD4+ T cell_T0h",
    final_cluster == "Fibroblast" & treatment == "AS01" ~ "Fibroblast_AS01",
    final_cluster == "Fibroblast" & treatment == "mock" ~ "Fibroblast_Mock",
    final_cluster == "Fibroblast" & treatment == "R848" ~ "Fibroblast_R848",
    final_cluster == "Fibroblast" & treatment == "T0h" ~ "Fibroblast_T0h",
    final_cluster == "FRC" & treatment == "AS01" ~ "FRC_AS01",
    final_cluster == "FRC" & treatment == "mock" ~ "FRC_Mock",
    final_cluster == "FRC" & treatment == "R848" ~ "FRC_R848",
    final_cluster == "FRC" & treatment == "T0h" ~ "FRC_T0h",
    final_cluster == "Adipocyte" & treatment == "AS01" ~ "Adipocyte_AS01",
    final_cluster == "Adipocyte" & treatment == "mock" ~ "Adipocyte_Mock",
    final_cluster == "Adipocyte" & treatment == "R848" ~ "Adipocyte_R848",
    final_cluster == "Adipocyte" & treatment == "T0h" ~ "Adipocyte_T0h",
    final_cluster == "LEC" & treatment == "AS01" ~ "LEC_AS01",
    final_cluster == "LEC" & treatment == "mock" ~ "LEC_Mock",
    final_cluster == "LEC" & treatment == "R848" ~ "LEC_R848",
    final_cluster == "LEC" & treatment == "T0h" ~ "LEC_T0h",
    final_cluster == "BEC" & treatment == "AS01" ~ "BEC_AS01",
    final_cluster == "BEC" & treatment == "mock" ~ "BEC_Mock",
    final_cluster == "BEC" & treatment == "R848" ~ "BEC_R848",
    final_cluster == "BEC" & treatment == "T0h" ~ "BEC_T0h",
    final_cluster == "FDC" & treatment == "AS01" ~ "FDC_AS01",
    final_cluster == "FDC" & treatment == "mock" ~ "FDC_Mock",
    final_cluster == "FDC" & treatment == "R848" ~ "FDC_R848",
    final_cluster == "FDC" & treatment == "T0h" ~ "FDC_T0h"

  ))
```

```{r}
spe$final_cluster_2_factor<- factor(spe$final_cluster_2, levels= c( "NK/Innate Lymphocytes_Mock","NK/Innate Lymphocytes_AS01","NK/Innate Lymphocytes_R848","NK/Innate Lymphocytes_T0h",
"Extrafollicular B cell_Mock", "Extrafollicular B cell_AS01", "Extrafollicular B cell_R848", "Extrafollicular B cell_T0h",
"pDC_Mock","pDC_AS01", "pDC_R848","pDC_T0h",
"Langerin+ cDC2_Mock","Langerin+ cDC2_AS01","Langerin+ cDC2_R848", "Langerin+ cDC2_T0h",
"cDC2_Mock","cDC2_AS01","cDC2_R848","cDC2_T0h",
"CD169- macs_Mock","CD169- macs_AS01","CD169- macs_R848", "CD169- macs_T0h",
"cDC1_Mock", "cDC1_AS01", "cDC1_R848","cDC1_T0h",
"CD169+ macs_Mock", "CD169+ macs_AS01","CD169+ macs_R848", "CD169+ macs_T0h",
"Mono/mac_Mock","Mono/mac_AS01","Mono/mac_R848","Mono/mac_T0h", 
"Memory CD8+ T cell_Mock", "Memory CD8+ T cell_AS01","Memory CD8+ T cell_R848","Memory CD8+ T cell_T0h",
"Naive CD8+ T cell_Mock", "Naive CD8+ T cell_AS01", "Naive CD8+ T cell_R848","Naive CD8+ T cell_T0h",
"Memory CD4+ T cell_Mock", "Memory CD4+ T cell_AS01","Memory CD4+ T cell_R848","Memory CD4+ T cell_T0h",
"Naive CD4+ T cell_Mock","Naive CD4+ T cell_AS01","Naive CD4+ T cell_R848", "Naive CD4+ T cell_T0h"

  ))
```


```{r}

# spe <- minDistToCells(spe, 
#                       x_cells = !is.na(spe$patch_id), 
#                       img_id = "ImageID",
#                       coords = c("x","y"))

?minDistToCells

library(ggridges)

spe$treatment_factor<- factor(spe$treatment, levels=c("R848", "AS01", "mock"))

ggplot(as.data.frame(colData(spe))) + 
    geom_density_ridges(aes(Signed.distance.to.annotation.with.Capsule.µm, final_cluster_2_factor, fill= final_cluster_factor_2, alpha = 0.5)) +
    geom_vline(xintercept = 0, color = "dark red", linewidth = 2)
```


```{r}
scale_colour_manual(values = c( "#481567FF", "#453781", "#9b2964", "#c43c4e","#c03a76", "#e85362", "#35b779", "#3a548c", "#297a8e", "#228c8d", "#46c06f", "#6ece58", "#84d44b", "#b5de2b", "#e7e419", "#da4e3c", "#ed6925", "#f47918","#fcac11", ))


scale_colour_manual(values = c( "#8104a7", "#9c179e", "#bd3786", "#cf4c74", "#bd3977", "#6001a6", "#7a02a8", "#9410a2", "#be3885", "#2c738e", "#1f948c"






```




```{r}




  scale_colour_manual(values = c( "#481567FF", "#453781", "#9b2964", "#c43c4e","#c03a76", "#e85362", "#35b779", "#3a548c", "#297a8e", "#228c8d", "#46c06f", "#6ece58", "#84d44b", "#b5de2b", "#e7e419", "#da4e3c", "#ed6925", "#f47918","

```



```{r}
################IGNORE###########
##now lets update final_cluster and do knn with IFNg status added

#lets redo everything with the extra two donors added in

spe<- readRDS("C:/Users/lizwork/Documents/IMCRanalysis/20250523_final_cluster_fixed_adipo_RO_dim.rds")
#clean up the cells a little bit more, don't want cells to have NA in "total spots estimated"
spe$total_estimated_spots_fixed<- ifelse(
is.na(spe$total.estimated.spots), 
"0", spe$total.estimated.spots)

unique(spe$total_estimated_spots_fixed)

#now also need to rename "parenchyma" to "T cell zone" as this is more accurate
#also forgot to change the name of the annotations, change to reflect the class in brackets
spe <- spe |>
  mutate(Parent = case_when(
    Parent == "Annotation (B cell zone)" ~ "B cell zone",
    Parent == "Annotation (Capsule)" ~ "Capsule",
    Parent == "Annotation (Parenchyma)" ~ "T cell zone",
    Parent == "Annotation (Empty)" ~ "Empty",
    Parent == "B cell zone" ~ "B cell zone",
    Parent == "Capsule" ~ "Capsule",
    Parent == "Parenchyma" ~ "T cell zone",
    Parent == "Empty" ~ "Empty",
    Parent == "Root object (Image)" ~ "Empty", # cells on edges that are in empty areas, did not get a classification
    Parent == "NA" ~ "Empty" # cells on edges that are in empty areas, did not get a classification
  ))

# now we want to remove any cells from the "empty" area, they are not of interest/also not cells
#clean up the cells a little bit more, don't want cells that have NA in "total spots estimated", these are cells that are again out of bounds so could not calculate






spe<-spe[,spe$Parent!="Empty"]
length(spe$uID)

spe <- spe|>
  mutate(DonorID = case_when(
    DonorID == "LN179" ~ "LN179",
    DonorID == "LN163.1" ~ "LN163.1",
    DonorID == "LN162.1" ~ "LN163.1",
    DonorID == "LN158.1" ~ "LN158.1",
    DonorID == "LN146.1" ~ "LN146.1",
    DonorID == "LN70" ~ "LN70",
    DonorID == "LN212" ~ "LN212",
    DonorID == "LN217" ~ "LN217",
    DonorID == "LN223.2" ~ "LN223.2", # cells on edges that are in empty areas, did not get a classification
    DonorID == "LN154" ~ "LN154" # cells on edges that are in empty areas, did not get a classification
  ))

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

#based on the above, we want to remove LN154 and LN217 from this analysis, as they are mock only. Also remove LN212 and LN223.2, because they do not have R848. 
#Can add back #in later if we want to do things with just mock samples, like neighbourhood analysis in mock only.
#20250610 added them back in as I am using a lmer mixed effects model, can put in random intercept?
spe<-spe[, colData(spe)$DonorID!="LN154"]
spe<-spe[, colData(spe)$DonorID!="LN217"]
# spe<-spe[, colData(spe)$DonorID!="LN212"]
# spe<-spe[, colData(spe)$DonorID!="LN223.2"]

dittoBarPlot(spe, var = "treatment", group.by = "DonorID")

ggsave("20250523_percent cells by treatment.png", dpi= "print", height = 7, width = 10 )

#now clean up the channel names so I can make nicer graphs

unique(rownames(spe))

rownames(spe)<- c("Vimentin", "115In", "CD20",            
"Collagen III","143Nd", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16","149Sm", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "NaKATPase", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5", "DNA1", "DNA2")

unique(rownames(spe))

rowSubset (spe)<- c("Vimentin",  "CD20",            
"Collagen III", "IFN gamma"
,"CD83","CD8","Podoplanin","CD16", "CD21"                   
, "Langerin", "CD68","CD45" , "CD31", "CXCR3", "CD56","CCR7", "CD14", "FXIIIA"                
, "CCR6", "CD11b", "CD45RO", "Perilipin1", "CD11c",                
"Ki67","Clec9a", "CD3" ,"CD1c", "Siglec1", "CD4",                  
"HLA_DR","CD303", "CXCR5")      

#make some conditions to decide functional status
CD83pos<-assay(spe,"data")["CD83",]>0.12 

IFNgpos<-assay(spe,"data")["IFN gamma",]>0.1
Ki67pos<-assay(spe,"data")["Ki67",]>0.1
CXCR3pos<-assay(spe,"data")["CXCR3",]>0.09#check this threshold in mantis to decide

#sum(is.na(spe$total.estimated.spots))
# spe$total.estimated.spots[is.na(spe$total.estimated.spots)]<-0
#sum(is.na(spe$total.estimated.spots))


# CCR6pos<-assay(spe,"data")["CCR6",]>0.05
# CCR7pos<-assay(spe,"data")["CCR7",]>0.07




```

```{r}
spe <- spe |>
  mutate(final_cluster= case_when(
    
    
    final_cluster == "NK/Innate Lymphocytes" & IFNgpos ~ "IFNgPosNKInnateLymphocytes",
    final_cluster == "NK/Innate Lymphocytes" & !IFNgpos ~ "IFNgNegNKInnateLymphocytes",
    final_cluster == "Follicular B cell"~ "FollicularBcell",
    final_cluster == "Extrafollicular B cell"~ "ExtrafollicularBcell",
    final_cluster == "pDC"~ "pDC",
    final_cluster == "Langerin+ cDC2"~ "LangerincDC2",
    final_cluster == "cDC2"~ "cDC2",
    final_cluster == "CD169- macs"~ "CD169NegMacs",
    final_cluster == "cDC1" ~ "cDC1",
    final_cluster == "CD169+ macs" ~ "CD169PosMacs",
    final_cluster == "Mono/mac" ~ "MonoMac",
    final_cluster == "Memory CD8+ T cell" & IFNgpos ~ "IFNgPosMemoryCD8Tcell",
    final_cluster == "Memory CD8+ T cell" & !IFNgpos ~ "IFNgNegMemoryCD8Tcell",
    final_cluster == "Naive CD8+ T cell" & IFNgpos ~"IFNgPosNaiveCD8Tcell",
    final_cluster == "Naive CD8+ T cell" & !IFNgpos ~"IFNgNegNaiveCD8Tcell",
    final_cluster == "Memory CD4+ T cell"& IFNgpos~ "IFNgposMemoryCD4Tcell",
    final_cluster == "Memory CD4+ T cell"& !IFNgpos~ "IFNgNegMemoryCD4Tcell",
    final_cluster == "Naive CD4+ T cell" & IFNgpos~ "IFNgPosNaiveCD4Tcell",
    final_cluster == "Naive CD4+ T cell" & !IFNgpos~ "IFNgNegNaiveCD4Tcell",
    final_cluster == "Fibroblast" ~ "Fibroblast",
    final_cluster == "FRC"~ "FRC",
    final_cluster == "Adipocyte" ~ "Adipocyte",
    final_cluster == "LEC" ~ "LEC",
    final_cluster == "BEC"~ "BEC",
    final_cluster == "FDC"~ "FDC"

  ))

unique(spe$final_cluster)
```

```{r}

#Ellis comments, should set k = 20-30, a larger value will give interactions over a wider area

#get rid of the T0h, we don't care for now
spe<-spe[, colData(spe)$treatment!="T0h"]


spatialCoordsNames(spe)<-c("x" ,"y")
set.seed(123)
spe<-buildSpatialGraph(spe, img_id = "ImageID", type = "expansion", name="expansion", threshold = 100,  coords = c("x","y"))
spe<-buildSpatialGraph(spe, img_id = "ImageID", type = "knn", name = "knn", k = 20, , coords = c("x","y"))

colPairNames(spe)

saveRDS (spe, "C:/Users/lizwork/Documents/IMCRanalysis/20250704_final_cluster_fixed_adipo_RO_dim_spatial_IFNg.rds")

```

